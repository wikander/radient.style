@use "sass:math";
@use "./paint.scss";
@use "./vars.scss";
@use "./utils.scss";
@use "./position.scss";
@use "./radient-dynamic.scss";
@use "./partials.scss";

:root {
  --pieceAngle: 100deg;
}

@mixin apps($c: currentColor, $backgroundColor: #fff) {
  background-size: 33.33% 33.33%;
  background-repeat: repeat;
  background-image: radial-gradient(
    35% 35%,
    $c calc(100% - 1px),
    $backgroundColor 100%
  );
}

@mixin cloud($c: currentColor, $bgc: #fff) {
  background-image: linear-gradient(
      0deg,
      #{$bgc} position.point(4),
      #{vars.$transparent} position.point(4)
    ),
    radial-gradient(
      circle at 50% 70%,
      #{$c} 27%,
      #{vars.$transparent} #{utils.openUp(27%)}
    ),
    radial-gradient(
      circle at 30% 60%,
      #{$c} 27%,
      #{vars.$transparent} #{utils.openUp(27%)}
    ),
    radial-gradient(
      circle at 75% 65%,
      #{$c} 21%,
      #{vars.$transparent} #{utils.openUp(21%)}
    ),
    radial-gradient(
      circle at 50% 48%,
      #{$c} 42%,
      #{vars.$transparent} #{utils.openUp(42%)}
    );
}

@mixin face($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.face(4%, $c, $bgc);
}

@mixin pie($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.pie(0deg, var(--pieceAngle), 50%, 0%, $c, $bgc);
}

@mixin pie-full($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.pieFull(
    0deg,
    50%,
    ((red, 90deg), (green, 180deg), (blue, 270deg), (orange, 360deg)),
    0%,
    $c,
    $bgc
  );
}

@mixin pie-periphery($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.pie(0deg, var(--pieceAngle), 50%, 84%, $c, $bgc);
}

@mixin contactless($c: currentColor, $bgc: #fff) {
  $centerRadius: 35%;
  $lineWidth: 9%;
  $angle: 55.5deg;

  background-image: conic-gradient(
      from 90deg + math.div($angle, 2),
      $bgc (1turn - $angle),
      transparent (1turn - $angle)
    ),
    radial-gradient(
      50% 50%,
      $bgc $centerRadius,
      $c $centerRadius ($centerRadius + $lineWidth),
      $bgc ($centerRadius + $lineWidth) ($centerRadius + $lineWidth * 2),
      $c ($centerRadius + $lineWidth * 2) ($centerRadius + $lineWidth * 3),
      $bgc ($centerRadius + $lineWidth * 3) ($centerRadius + $lineWidth * 4),
      $c ($centerRadius + $lineWidth * 4) ($centerRadius + $lineWidth * 5),
      $bgc ($centerRadius + $lineWidth * 5) ($centerRadius + $lineWidth * 6),
      $c ($centerRadius + $lineWidth * 6) ($centerRadius + $lineWidth * 7),
      $bgc ($centerRadius + $lineWidth * 7)
    );
}

@mixin wifi($c: currentColor, $bgc: #fff) {
  $centerRadius: 35%;
  $lineWidth: 23.5%;

  $firstEnd: $centerRadius;
  $secondStart: $centerRadius + $lineWidth;
  $secondEnd: $centerRadius + ($lineWidth * 2);
  $thirdStart: $centerRadius + ($lineWidth * 3);
  $thirdEnd: $centerRadius + ($lineWidth * 4);

  background-image: conic-gradient(
      from 45deg at 50% 83%,
      $bgc 270deg,
      transparent 270deg
    ),
    radial-gradient(
      50% 50% at 50% 83%,
      $c $firstEnd,
      $bgc utils.openUp($firstEnd) utils.openDown($secondStart),
      $c $secondStart $secondEnd,
      $bgc utils.openUp($secondEnd) utils.openDown($thirdStart),
      $c $thirdStart $thirdEnd,
      $bgc utils.openUp($thirdEnd)
    );
}

@mixin menu($c: currentColor, $bgc: #fff) {
  background-image: paint.stripes(
      $bgc,
      90deg,
      [(position.point(3), position.point(18), vars.$transparent)],
      true
    ),
    paint.stripes(
      $bgc,
      0,
      [(position.point(6), position.point(2), $c),
      (position.point(11), position.point(2), $c),
      (position.point(16), position.point(2), $c)],
      true
    );
}

@mixin list($c: currentColor, $bgc: #fff) {
  background-image: paint.stripes(
      $bgc,
      90deg,
      [(position.point(3), position.point(2), vars.$transparent),
      (position.point(7), position.point(14), vars.$transparent)],
      true
    ),
    paint.stripes(
      $bgc,
      0,
      [(position.point(7), position.point(2), $c),
      (position.point(11), position.point(2), $c),
      (position.point(15), position.point(2), $c)],
      true
    );
}

@mixin drag-handle($c: currentColor, $bgc: #fff) {
  background-image: paint.stripes(
      $bgc,
      90deg,
      [(position.point(4), position.point(16), vars.$transparent)],
      true
    ),
    paint.stripes(
      $bgc,
      0,
      [(position.point(9), position.point(2), $c),
      (position.point(13), position.point(2), $c)],
      true
    );
}

@mixin gs1($c: currentColor, $bgc: #fff) {
  background-image: conic-gradient(
      from -25deg at 60% 50%,
      $bgc 230deg,
      vars.$transparent 230deg
    ),
    radial-gradient(
      50% 50%,
      vars.$transparent utils.openDown(37%),
      $c 37% 43%,
      vars.$transparent utils.openUp(43%) utils.openDown(54%),
      $c 54% 61%,
      vars.$transparent utils.openUp(61%) utils.openDown(72%),
      $c 72% 80%,
      vars.$transparent utils.openUp(80%) utils.openDown(91%),
      $c 91% 100%,
      vars.$transparent utils.openUp(100%)
    );
}

@mixin done($c: currentColor, $bgc: #fff) {
  background-image: conic-gradient(
      from 135deg at 64% 5.4%,
      vars.$transparent 90deg,
      $bgc 90deg 315deg
    ),
    conic-gradient(
      from 315deg at 37.5% 67.5%,
      $bgc 90deg,
      vars.$transparent 90deg 315deg
    ),
    conic-gradient(
      from 315deg at 37.5% 79%,
      $c 90deg,
      vars.$transparent 90deg 315deg
    );
}

@mixin chevron-down($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    180deg,
    50%,
    math.percentage(math.div(2, 3)),
    50%,
    math.percentage(math.div(2, 3) - vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(1, 6)),
    0,
    $c,
    $bgc
  );
}

@mixin chevron-up($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    0deg,
    50%,
    math.percentage(math.div(1, 3)),
    50%,
    math.percentage(math.div(1, 3) + vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(5, 6)),
    0,
    $c,
    $bgc
  );
}

@mixin chevron-right($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    90deg,
    math.percentage(math.div(2, 3)),
    50%,
    math.percentage(math.div(2, 3) - vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(1, 6)),
    50%,
    0,
    $c,
    $bgc
  );
}

@mixin chevron-left($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    270deg,
    math.percentage(math.div(1, 3)),
    50%,
    math.percentage(math.div(1, 3) + vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(5, 6)),
    50%,
    0,
    $c,
    $bgc
  );
}

@mixin arrow-up($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    0deg,
    50%,
    math.percentage(math.div(1, 6)),
    50%,
    math.percentage(math.div(1, 6) + vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(5, 6)),
    math.percentage(math.div(1, 6)),
    $c,
    $bgc
  );
}

@mixin arrow-down($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    180deg,
    50%,
    math.percentage(math.div(5, 6)),
    50%,
    math.percentage(math.div(5, 6) - vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(1, 6)),
    math.percentage(math.div(1, 6)),
    $c,
    $bgc
  );
}

@mixin arrow-right($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    90deg,
    math.percentage(math.div(5, 6)),
    50%,
    math.percentage(math.div(5, 6) - vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(1, 6)),
    50%,
    math.percentage(math.div(1, 6)),
    $c,
    $bgc
  );
}

@mixin arrow-left($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.arrow(
    270deg,
    math.percentage(math.div(1, 6)),
    50%,
    math.percentage(math.div(1, 6) + vars.$lineWidthRelativeDiagonal),
    50%,
    math.percentage(math.div(5, 6)),
    50%,
    math.percentage(math.div(1, 6)),
    $c,
    $bgc
  );
}

@mixin ball($c: currentColor, $bgc: #fff) {
  background-image: #{paint.circleOutlined(
        $bgc,
        vars.$transparent,
        vars.$transparent,
        0%,
        50%,
        35%,
        position.point(2),
        true
      )},
    #{paint.circleOutlined(
        $bgc,
        vars.$transparent,
        vars.$transparent,
        100%,
        50%,
        35%,
        position.point(2),
        true
      )},
    #{paint.circle($c, $bgc, 50%, 50%, math.percentage(math.div(5, 12)), true)};
}

@mixin barcode($c: currentColor, $bgc: #fff) {
  background-image: paint.stripes(
      $bgc,
      0,
      [(position.point(5.5), position.point(13), vars.$transparent)]
    ),
    radient-dynamic.barcode(
      5 4 7 8 6 2 9 9 2 6 5 10 4 2 3 6 7,
      position.point(3),
      $c,
      $bgc
    );
}

@mixin search($c: currentColor, $bgc: #fff) {
  $handleWidth: position.point(2);

  background-image: #{paint.circleOutlined(
        $c,
        $bgc,
        vars.$transparent,
        40%,
        40%,
        position.point(6.5),
        position.point(4),
        true
      )},
    #{paint.rectangle(
        $c,
        $bgc,
        $bgc,
        135deg,
        $handleWidth,
        position.point(15),
        37%,
        50% - math.div($handleWidth, 2),
        true
      )};
}

@mixin trash($c: currentColor, $bgc: #fff) {
  $cutTop: 26%;
  $cutBottom: 78%;
  $cut: "linear-gradient(225deg, #{$bgc} #{utils.openDown($cutTop)}, #{vars.$transparent} #{$cutTop}, #{vars.$transparent} #{$cutBottom}, #{$bgc} #{utils.openUp($cutBottom)}), linear-gradient(135deg, #{$bgc} #{utils.openDown($cutTop)} , #{vars.$transparent} #{$cutTop}, #{vars.$transparent} #{$cutBottom}, #{$bgc} #{utils.openUp($cutBottom)})";
  $handle: "linear-gradient(90deg, #{$bgc} #{position.point(9)}, #{vars.$transparent} #{position.point(9)}, #{vars.$transparent} #{position.point(15)}, #{$bgc} #{position.point(15)}), linear-gradient(0deg, #{vars.$transparent} #{position.point(20)}, #{$c} #{position.point(20)}, #{$c} #{position.point(21)}, #{vars.$transparent} #{position.point(21)})";
  $lid: "linear-gradient(90deg, #{$bgc} #{position.point(5)}, #{vars.$transparent} #{position.point(5)}, #{vars.$transparent} #{position.point(19)}, #{$bgc} #{position.point(19)}), linear-gradient(0deg, #{vars.$transparent} #{position.point(18)}, #{$c} #{position.point(18)}, #{$c} #{position.point(20)}, #{vars.$transparent} #{position.point(20)})";
  $can: "linear-gradient(90deg, #{$bgc} #{position.point(6)}, #{vars.$transparent} #{position.point(6)}, #{vars.$transparent} #{position.point(18)}, #{$bgc} #{position.point(18)}), linear-gradient(0deg, #{vars.$transparent} #{position.point(3)}, #{$c} #{position.point(3)}, #{$c} #{position.point(17)}, #{vars.$transparent} #{position.point(17)})";
  background-image: #{$lid}, #{$cut}, #{$can}, #{$handle};
}

@mixin bar-chart($c: currentColor, $bgc: #fff) {
  @include radient-dynamic.bar-chart($c, $bgc);
}

@mixin logo($c: currentColor, $bgc: #fff) {
  $numOfPiece: 3;
  $lengthOfPiece: 90deg;
  $space: math.div(360deg - ($lengthOfPiece * $numOfPiece), $numOfPiece);

  background-image: radial-gradient(
      50% 50%,
      $bgc 15%,
      $c 15% 30%,
      $bgc 30% 45%,
      vars.$transparent 45% 60%,
      $bgc 60%
    ),
    conic-gradient(
      from calc(0deg - $lengthOfPiece / 2) at 50% 50%,
      $c $lengthOfPiece,
      vars.$transparent $lengthOfPiece ($lengthOfPiece + $space),
      $c ($lengthOfPiece + $space) (2 * $lengthOfPiece + $space),
      vars.$transparent (2 * $lengthOfPiece + $space)
        (2 * $lengthOfPiece + 2 * $space),
      $c (2 * $lengthOfPiece + 2 * $space) (3 * $lengthOfPiece + 2 * $space),
      vars.$transparent (3 * $lengthOfPiece + 2 * $space)
    );
}

@mixin logo-outer($c: currentColor, $bgc: #fff) {
  $numOfPiece: 4;
  $lengthOfPiece: 60deg;
  $space: math.div(360deg - ($lengthOfPiece * $numOfPiece), $numOfPiece);

  background-image: radial-gradient(
      50% 50%,
      $bgc 15%,
      $c 15% 30%,
      $bgc 30% 60%,
      vars.$transparent 60% 75%,
      $bgc 75%
    ),
    conic-gradient(
      from calc(0deg - $lengthOfPiece / 2) at 50% 50%,
      $c $lengthOfPiece,
      vars.$transparent $lengthOfPiece ($lengthOfPiece + $space),
      $c ($lengthOfPiece + $space) (2 * $lengthOfPiece + $space),
      vars.$transparent (2 * $lengthOfPiece + $space)
        (2 * $lengthOfPiece + 2 * $space),
      $c (2 * $lengthOfPiece + 2 * $space) (3 * $lengthOfPiece + 2 * $space),
      vars.$transparent (3 * $lengthOfPiece + 2 * $space)
        (3 * $lengthOfPiece + 3 * $space),
      $c (3 * $lengthOfPiece + 3 * $space) (4 * $lengthOfPiece + 3 * $space),
      vars.$transparent (4 * $lengthOfPiece + 3 * $space)
    );
}

@mixin add($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.plus(12, 14, 14, 2, $c, $bgc)};
}

@mixin add-circle($c: currentColor, $bgc: #fff) {
  background-image: #{partials.circularOutline($c, $bgc)},
    #{radient-dynamic.plus(12, 10, 10, 2, $c, $bgc)};
}

@mixin remove($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.minus(12, 14, 2, $c, $bgc)};
}

@mixin remove-circle($c: currentColor, $bgc: #fff) {
  background-image: #{partials.circularOutline($c, $bgc)},
    #{radient-dynamic.minus(12, 10, 2, $c, $bgc)};
}

@mixin info($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.info(12, 2, $c, $bgc)};
}

@mixin info-circle($c: currentColor, $bgc: #fff) {
  background-image: #{partials.circularOutline($c, $bgc)},
    #{radient-dynamic.info(12, 2, $c, $bgc)};
}

@mixin battery-empty($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, 0)};
}

@mixin battery-full($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, 1)};
}

@mixin battery-1($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, math.div(1, 7))};
}

@mixin battery-2($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, math.div(2, 7))};
}

@mixin battery-3($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, math.div(3, 7))};
}

@mixin battery-4($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, math.div(4, 7))};
}

@mixin battery-5($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, math.div(5, 7))};
}

@mixin battery-6($c: currentColor, $bgc: #fff) {
  background-image: #{radient-dynamic.battery($c, $bgc, math.div(6, 7))};
}

@mixin man($c: currentColor, $bgc: #fff) {
  background-image: #{paint.rectangle(
        $c,
        vars.$transparent,
        $bgc,
        0,
        position.point(8),
        position.point(8),
        position.point(9),
        position.point(8)
      )},
    #{paint.rectangle(
        $c,
        vars.$transparent,
        $bgc,
        0,
        position.point(4),
        position.point(15),
        position.point(2),
        position.point(10)
      )},
    #{paint.circle(
        $c,
        $bgc,
        position.point(12),
        position.point(4),
        position.point(2),
        true
      )};
}

@mixin woman($c: currentColor, $bgc: #fff) {
  background-image: #{paint.circle(
        $c,
        vars.$transparent,
        position.point(12),
        position.point(4),
        position.point(2),
        true
      )},
    #{paint.rectangle(
        $c,
        vars.$transparent,
        $bgc,
        90deg,
        position.point(15),
        position.point(4),
        position.point(10),
        position.point(7)
      )},
    #{paint.triangle(
        $c,
        $bgc,
        position.point(12),
        position.point(7),
        60deg,
        position.point(9),
        180deg,
        true
      )};
}

@mixin player-stop($c: currentColor, $bgc: #fff) {
  background-image: #{paint.rectangle(
      $c,
      $bgc,
      $bgc,
      0deg,
      position.point(12),
      position.point(12),
      position.point(6),
      position.point(6)
    )};
}

@mixin player-play($c: currentColor, $bgc: #fff) {
  background-image: #{paint.triangle(
      $c,
      $bgc,
      position.point(19),
      position.point(12),
      64deg,
      position.point(11),
      -90deg,
      true
    )};
}

@mixin player-skip-next($c: currentColor, $bgc: #fff) {
  background-image: #{paint.rectangle(
        $c,
        vars.$transparent,
        $bgc,
        90deg,
        position.point(12),
        position.point(2),
        position.point(16.5),
        position.point(6)
      )},
    #{paint.triangle(
        $c,
        $bgc,
        position.point(14.5),
        position.point(12),
        64deg,
        position.point(9),
        -90deg,
        true
      )};
}

@mixin player-pause($c: currentColor, $bgc: #fff) {
  background-image: #{paint.rectangle(
        $c,
        vars.$transparent,
        $bgc,
        90deg,
        position.point(14),
        position.point(6),
        position.point(5),
        position.point(5)
      )},
    #{paint.rectangle(
        $c,
        vars.$transparent,
        $bgc,
        90deg,
        position.point(14),
        position.point(6),
        position.point(13),
        position.point(5)
      )};
}

@mixin send($c: currentColor, $bgc: #fff) {
  $bigAngle: 22.75deg;
  $smallAngle: 9deg;

  background-image: linear-gradient(
      270deg,
      vars.$transparent,
      vars.$transparent position.point(22),
      $bgc position.point(22)
    ),
    linear-gradient(
      calc(270deg + $bigAngle + 90deg),
      vars.$transparent,
      vars.$transparent 63.5%,
      $bgc utils.openUp(63.5%)
    ),
    linear-gradient(
      calc(270deg - $bigAngle - 90deg),
      vars.$transparent,
      vars.$transparent 63.5%,
      $bgc utils.openUp(63.5%)
    ),
    linear-gradient(
      calc(270deg - $smallAngle - 90deg),
      vars.$transparent,
      vars.$transparent utils.openDown(52.5%),
      $c 52.5%
    ),
    linear-gradient(
      calc(270deg + $smallAngle + 90deg),
      $bgc,
      $bgc utils.openDown(52.5%),
      vars.$transparent 52.5%
    ),
    linear-gradient(
      calc(270deg + $bigAngle + 90deg),
      $c,
      $c 63.5%,
      $bgc utils.openUp(63.5%)
    );
}

@mixin calendar($c: currentColor, $bgc: #fff) {
  background-image: paint.circle(
      $c,
      vars.$transparent,
      position.point(18),
      position.point(3),
      position.point(1.5),
      true
    ),
    paint.circle(
      $c,
      vars.$transparent,
      position.point(6),
      position.point(3),
      position.point(1.5),
      true
    ),
    paint.stripes(
      $bgc,
      90deg,
      [(position.point(2), position.point(20), vars.$transparent)]
    ),
    paint.stripes(
      $bgc,
      0,
      [(position.point(1), position.point(2), $c),
      (position.point(16), position.point(5), $c, vars.$transparent)]
    ),
    paint.stripes(
      $bgc,
      90deg,
      [(position.point(2), position.point(2), $c),
      (position.point(20), position.point(2), $c)]
    );
}

@mixin credit-card($c: currentColor, $bgc: #fff) {
  background-image: #{paint.stripes(
        $bgc,
        90deg,
        [(position.point(2), position.point(20), vars.$transparent)]
      )},
    #{paint.stripes(
        $bgc,
        0,
        [(position.point(4), position.point(2), $c),
        (position.point(12), position.point(4), $c, vars.$transparent),
        (position.point(18), position.point(2), $c, vars.$transparent)]
      )},
    #{paint.stripes(
        $bgc,
        90deg,
        [(position.point(2), position.point(2), $c),
        (position.point(20), position.point(2), $c)]
      )};
}

@mixin accessibility($c: currentColor, $bgc: #fff) {
  background-image: #{paint.circle(
        $c,
        vars.$transparent,
        position.point(12),
        position.point(4),
        position.point(2),
        true
      )},
    #{paint.stripes(
        $bgc,
        90deg,
        [(position.point(3), position.point(18), vars.$transparent)]
      )},
    #{paint.stripes(
        $bgc,
        180deg,
        [(position.point(7), position.point(2), $c),
        (position.point(22), position.point(2), $bgc, vars.$transparent)]
      )},
    #{paint.stripes(
        $bgc,
        90deg,
        [(position.point(9), position.point(2), $c),
        (position.point(13), position.point(2), $c, vars.$transparent)]
      )},
    #{paint.rectangle(
        $c,
        $bgc,
        $bgc,
        0,
        position.point(6),
        position.point(9),
        position.point(8),
        position.point(9)
      )};
}

@mixin pyramid-arrow-right($c: currentColor, $bgc: #fff) {
  background-image: #{paint.triangle(
      $c,
      $bgc,
      position.point(15),
      position.point(12),
      90deg,
      position.point(5),
      270deg,
      true
    )};
}

@mixin pyramid-arrow-left($c: currentColor, $bgc: #fff) {
  background-image: #{paint.triangle(
      $c,
      $bgc,
      position.point(9),
      position.point(12),
      90deg,
      position.point(5),
      90deg,
      true
    )};
}

@mixin pyramid-arrow-up($c: currentColor, $bgc: #fff) {
  background-image: #{paint.triangle(
      $c,
      $bgc,
      position.point(12),
      position.point(9),
      90deg,
      position.point(5),
      180deg,
      true
    )};
}

@mixin pyramid-arrow-down($c: currentColor, $bgc: #fff) {
  background-image: #{paint.triangle(
      $c,
      $bgc,
      position.point(12),
      position.point(15),
      90deg,
      position.point(5),
      0deg,
      true
    )};
}

@mixin house($c: currentColor, $bgc: #fff) {
  background-image: linear-gradient(
      -37deg,
      vars.$transparent,
      vars.$transparent utils.openDown(72%),
      $bgc 72%
    ),
    linear-gradient(
      37deg,
      vars.$transparent,
      vars.$transparent utils.openDown(72%),
      $bgc 72%
    ),
    linear-gradient(
      0,
      $bgc,
      $bgc position.point(3),
      vars.$transparent position.point(3)
    ),
    paint.stripes(
      vars.$transparent,
      270deg,
      [(position.point(4), position.point(5), $c),
      (position.point(15), position.point(5), $c)],
      true
    ),
    linear-gradient(
      0,
      $bgc,
      $bgc position.point(10),
      vars.$transparent position.point(10)
    ),
    paint.stripes(
      vars.$transparent,
      270deg,
      [(position.point(4), position.point(16), $c)],
      true
    );
}

@function rayPair($angle, $c, $bgc) {
  @return paint.stripes(
      $bgc,
      $angle,
      [(position.point(1), position.point(22), vars.$transparent)],
      true
    ),
    paint.stripes(
      $bgc,
      $angle + 90deg,
      [(position.point(1), position.point(10), vars.$transparent),
      (position.point(11), position.point(2), $c),
      (position.point(13), position.point(10), vars.$transparent)],
      true
    ),
    paint.stripes(
      vars.$transparent,
      $angle,
      [(position.point(11), position.point(2), $c)],
      true
    );
}

@mixin sun($c: currentColor, $bgc: #fff) {
  background-image: #{paint.circleOutlined(
        $bgc,
        $c,
        vars.$transparent,
        50%,
        50%,
        position.point(7),
        position.point(4),
        true
      )},
    rayPair(45deg, $c, $bgc), rayPair(0, $c, $bgc);
}

@mixin drop($c: currentColor, $bgc: #fff) {
  background-image: #{paint.circle(
        $c,
        vars.$transparent,
        position.point(12),
        position.point(14.5),
        position.point(6.5),
        true
      )},
    #{paint.triangle(
        $c,
        $bgc,
        position.point(12),
        position.point(1.5),
        60deg,
        position.point(9.75),
        180deg,
        true
      )};
}
