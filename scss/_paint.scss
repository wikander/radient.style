@use "./vars.scss";
@use "./utils.scss";
@use "sass:math";
@use "sass:list";

@function stripes($bgc, $direction, $stripes, $antiAliased: false) {
  // stripes is a list of quadruples of start position, height of a stripe, color of the stripe and (optional) background color before the stripe (after previous stripe).

  $renderedStripes: ();

  $previousEnd: null;

  @for $i from 1 through list.length($stripes) {
    $currentStripe: list.nth($stripes, $i);

    $currentStart: list.nth($currentStripe, 1);
    $currentHeight: list.nth($currentStripe, 2);
    $currentColor: list.nth($currentStripe, 3);
    $currentBackgroundColor: $bgc;

    @if list.length($currentStripe) > 3 {
      $currentBackgroundColor: list.nth($currentStripe, 4);
    }

    $startDistanceFromMiddle: $currentStart - 50%;
    $normalizedStartDistanceFromMiddle: utils.fromLinearGradientDistance(
      $startDistanceFromMiddle,
      $direction
    );

    $normalizedStart: 50% + $normalizedStartDistanceFromMiddle;
    $normalizedHeight: utils.fromLinearGradientDistance(
      $currentHeight,
      $direction
    );
    $normalizedEnd: $normalizedStart + $normalizedHeight;

    @if ($i == 1) {
      $renderedStripes: list.append(
        $renderedStripes,
        (
          $currentBackgroundColor $normalizedStart,
          $currentColor $normalizedStart $normalizedEnd
        )
      );
    } @else {
      $renderedStripes: list.append(
        $renderedStripes,
        (
          $currentBackgroundColor $previousEnd $normalizedStart,
          $currentColor $normalizedStart $normalizedEnd
        )
      );
    }

    @if ($i == list.length($stripes)) {
      $renderedStripes: list.append(
        $renderedStripes,
        $bgc $normalizedEnd,
        $separator: comma
      );
    }

    $previousEnd: $normalizedEnd;
  }

  @return linear-gradient(#{$direction}, $renderedStripes);
}

@function segment($c, $bgc, $direction, $height, $start, $antiAliased: false) {
  $startDistanceFromMiddle: $start - 50%;
  $normalizedStartDistanceFromMiddle: utils.fromLinearGradientDistance(
    $startDistanceFromMiddle,
    $direction
  );

  $normalizedStart: 50% + $normalizedStartDistanceFromMiddle;
  $normalizedHeight: utils.fromLinearGradientDistance($height, $direction);
  $normalizedEnd: $normalizedStart + $normalizedHeight;

  @return linear-gradient(
    #{$direction},
    $bgc #{utils.openDown($normalizedStart, $antiAliased)},
    $c #{$normalizedStart} #{$normalizedEnd},
    $bgc #{utils.openUp($normalizedEnd, $antiAliased)}
  );
}

@function rectangle(
  $c,
  $bgcMain: #fff,
  $bgcCross: #fff,
  $mainAngle,
  $width,
  $height,
  // Length along main axes
  $mainStart,
  $crossStart,
  $antiAliased: false
) {
  $crossAngle: $mainAngle + 90deg;
  @return stripes(
      $bgcCross,
      $crossAngle,
      [($crossStart, $width, vars.$transparent)],
      $antiAliased
    ),
    stripes($bgcMain, $mainAngle, [($mainStart, $height, $c)], $antiAliased);
}

@function circle(
  $c,
  $bgc,
  $positionX,
  $positionY,
  $radius,
  $antiAliased: false
) {
  @return oval(
    $c,
    $bgc,
    $positionX,
    $positionY,
    $radius,
    $radius,
    $antiAliased
  );
}

@function oval(
  $c,
  $bgc,
  $positionX,
  $positionY,
  $radiusX,
  $radiusY,
  $antiAliased: false
) {
  @return radial-gradient(
    #{$radiusX} #{$radiusY} at #{$positionX} #{$positionY},
    #{$c} 100%,
    #{$bgc} utils.openUp(100%, $antiAliased)
  );
}

@function triangle(
  $color,
  $bgc,
  $positionX,
  $positionY,
  $angle,
  $height,
  $direction: 180deg,
  $antiAliased: false
) {
  $startPosition: 50% +
    utils.distanceToPointOnLinearFromHalf($direction, $positionX, $positionY);
  $normalizedHeight: utils.fromLinearGradientDistance($height, $direction);
  $height: "linear-gradient(#{$direction}, #{vars.$transparent} #{$startPosition + $normalizedHeight}, #{$bgc} #{utils.openUp($startPosition + $normalizedHeight, $antiAliased)})";

  @return "#{$height}, #{sector($color, $bgc, $direction, $angle, $positionX, $positionY, $antiAliased)}";
}

@function circleOutlined(
  $c,
  $bgc1,
  $bgc2,
  $positionX,
  $positionY,
  $radius,
  $lineWidth: math.percentage(vars.$lineWidthRelative),
  $antiAliased: false
) {
  @return ovalOutlined(
    $c,
    $bgc1,
    $bgc2,
    $positionX,
    $positionY,
    $radius,
    $radius,
    $lineWidth,
    $antiAliased
  );
}

@function ovalOutlined(
  $c,
  $bgc1,
  $bgc2,
  $positionX,
  $positionY,
  $radiusX,
  $radiusY,
  $lineWidth: math.percentage(vars.$lineWidthRelative),
  $antiAliased: false
) {
  $relativeCanvasSize: math.div(utils.strip-unit($radiusX) * 2, 100);
  $localLineWidth: math.percentage(
    math.div(math.div(utils.strip-unit($lineWidth), 100), $relativeCanvasSize)
  );

  @return radial-gradient(
    $radiusX $radiusY at $positionX $positionY,
    $bgc1 #{utils.openDown(100% - $localLineWidth, $antiAliased)},
    $c #{100% - $localLineWidth} 100%,
    $bgc2 utils.openUp(100%, $antiAliased)
  );
}

@function sector(
  $c,
  $bgc,
  $direction,
  $angle,
  $positionX,
  $positionY,
  $antiAliased: false
) {
  $startAngle: $direction - math.div($angle, 2) + 90;

  $side1Start: 50% +
    utils.distanceToPointOnLinearFromHalf($startAngle, $positionX, $positionY);

  $side1: "linear-gradient(#{$startAngle}, #{$bgc} #{utils.openDown($side1Start, $antiAliased)}, #{$c} #{$side1Start})";

  $endAngle: $direction + math.div($angle, 2) - 90;
  $side2Start: 50% +
    utils.distanceToPointOnLinearFromHalf($endAngle, $positionX, $positionY);

  $side2: "linear-gradient(#{$endAngle}, #{$bgc} #{utils.openDown($side2Start, $antiAliased)}, #{vars.$transparent} #{$side2Start})";
  @return "#{$side2}, #{$side1}";
}
